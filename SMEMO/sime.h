//==============================================================
// Simple IME   (STPP.04)
//     for PSP CFW5.00 M33-6
// STEAR 2009
//--------------------------------------------------------------
// PSP用の簡易IMEライブラリ。
// ソフトウェアキーボードと熟語漢字変換とユーザー辞書（予測変換）を実装。
//--------------------------------------------------------------

#ifndef SimpleIME_H
#define SimpleIME_H

#define SIME_KEY_UP			0x1E
#define SIME_KEY_DOWN		0x1F
#define SIME_KEY_LEFT		0x1D
#define SIME_KEY_RIGHT		0x1C
#define SIME_KEY_TRIANGLE	0x02
#define SIME_KEY_CROSS		0x1B
#define SIME_KEY_SQUARE		0x08
#define SIME_KEY_CIRCLE		0x0D
#define SIME_KEY_LTRIGGER	0x03
#define SIME_KEY_RTRIGGER	0x04
#define SIME_KEY_START		0x05
#define SIME_KEY_SELECT		0x06


//==============================================================
// 辞書ファイルの読み込みと各種初期化
//--------------------------------------------------------------
// flag      0:ウィンドウ消去時に背景を復元する
//        以外:ウィンドウ消去時に何もしない（メイン側で作画するべし）
// 戻り値    1:既に初期化されている
//           0:辞書の読み込み成功
//          -1:不正な辞書ファイル
//          -2:メモリが足りない
//          -3:辞書ファイルが開けない（存在しない？）
//--------------------------------------------------------------
// 辞書ファイルとIME環境設定を読み込みます。
// 既に初期化されている場合は flag の設定変更のみ実行します。
// 環境設定ファイルは辞書ファイルと同じフォルダに配置されます。
// ユーザー辞書が読めなかった場合の警告はありません。
//--------------------------------------------------------------

int		InitSIME(int flag);


//==============================================================
// 終了処理
//--------------------------------------------------------------
// メモリに保持していた辞書をファイルに書き戻した後、開放する。
// これを実行せずに電源を切る等をすると漢字候補の並べ替えが次回に反映されません。
// また、IME環境データを設定ファイルに保存します。
// 設定ファイルの位置は辞書ファイルと同じフォルダになりますが、
// 辞書が見つからなかった場合は EBOOT.PBP と同じフォルダになります。
//--------------------------------------------------------------

void	EndSIME(void);


///==============================================================
// 文字フォント指定
//--------------------------------------------------------------
// font   フォント種別
// cyw    フォントの高さ（16まで）
// 戻り値 指定する前のフォント種別
//--------------------------------------------------------------
// 変換行に使用する文字フォントを指定する。
// ただし各種ウィンドゥに表示される文字は東雲フォントに固定。
//--------------------------------------------------------------

int SIMEfont(int font,int cyw);


//==============================================================
// 文字カーソル指定
//--------------------------------------------------------------
// xw  カーソルのX方向の幅（0以下:カーソル表示なし）
// x,y カーソル位置
//--------------------------------------------------------------
// カーソル座標を指定する変数とカーソル形状を指定する。
// カーソル表示はSgets()を実行している間、更新されます。
// カーソルはI型で、Y方向の大きさはSIMEfont()で指定します。
//--------------------------------------------------------------

void SIMEcursor(int xw,int x,int y);


//==============================================================
// 画面作画設定
//--------------------------------------------------------------
// page 作画を行う画面ページ（0か1）
//--------------------------------------------------------------
// 作画を行う画面ページを指定します。
// sceGuDrawBuffer()とかの設定は考慮していません。
// VRAMの先頭から縦272ドット毎にページ0,1と決め打ちしています。
// メイン側の作画仕様によっては使えない事もあると思いますが、その時は適当に
// 修正するべし。
//--------------------------------------------------------------

void SIMESetDraw(int page);


//==============================================================
// 文字列入力
//--------------------------------------------------------------
// *str   入力された文字（最大33バイト asciiz）
// pad    パッド情報
// 戻り値 strそのもの
//--------------------------------------------------------------
// ソフトキーボードによる文字列の入力。
// かな英数およびIMEによる漢字変換処理も行う。
// 文字だけでなくカーソルキー等の各ボタンもコントロールコードとして返す。
// コントロールコードの対応はSgetchar()を参照してください。
// 入力文字列は（確定された文字がある場合は）strに入っています。
//--------------------------------------------------------------

char	*SIMEgets(char *str,SceCtrlData pad);


//==============================================================
// キー入力
//--------------------------------------------------------------
// pad    パッド情報
// 戻り値 0:入力なし
//        →:0x1C ←:0x1D ↑:0x1E ↓:0x1F
//        ○:0x0D（[Enter]） ×:0x1B（[Esc]） □:0x08（[BS]） △:0x02 L:0x03 R:0x04
//        [START]:0x05 [SELECT]:0x06
//--------------------------------------------------------------
// 各ボタンの状態をキーボード風なキーリピートありで取得する。
// 同時押しの場合は最後に押し下げたボタンに対応するコードを返す。
// これは文字入力はしないけど、キーリピートありでキー入力を行いたい場合などを
// 想定して用意してあります。
//--------------------------------------------------------------

int		SIMEgetchar(SceCtrlData pad1);


//==============================================================
// 文字カーソルを表示
//--------------------------------------------------------------
// ch   -1：ウィンドウ系とカーソルを消去
//       0：カーソルを点滅させる
//    以外：カーソルを消去/表示しない
//--------------------------------------------------------------
// SIMEgetchar()単体ではカーソル表示が行われないため、カーソルを表示したい場合
// にこれを使用する。
// 例)
//   ch = SIMEgetchar(pad1);
//   SIMEDrawCursor(ch);
//
// また、キー操作とは別にウィンドウ等の表示系を消したい場合に-1を指定する。
//--------------------------------------------------------------

void	SIMEDrawCursor(int ch);


//==============================================================
// シフトJISの第１文字チェック
//--------------------------------------------------------------
// 戻り値  0:第１文字ではない
//        -1:第１文字である
//--------------------------------------------------------------
// シフトJIS文字列を扱うなら必ず必要になるので一応用意しときました。
//--------------------------------------------------------------

int		chkSJIS(unsigned char cr);


//==============================================================
// 文字入力切り替え
//--------------------------------------------------------------
// ime 入力ソース（0:Simple IME 以外:OSK）
// str 入力された文字列
// pad パッド情報
//--------------------------------------------------------------
// 入力ソースをSimple IMEとOSKで切り替えます。
// OSK使用時に画面イメージを待避するバッファが確保できなかった場合は
// Simple IMEが使用されます。
//--------------------------------------------------------------

void	SIMEselInput(int ime,char *str,SceCtrlData pad);



#endif
